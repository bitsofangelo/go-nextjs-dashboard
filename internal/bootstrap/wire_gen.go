// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/gelozr/go-dash/internal/app"
	"github.com/gelozr/go-dash/internal/auth"
	"github.com/gelozr/go-dash/internal/config"
	"github.com/gelozr/go-dash/internal/customer"
	"github.com/gelozr/go-dash/internal/dashboard"
	"github.com/gelozr/go-dash/internal/db"
	"github.com/gelozr/go-dash/internal/event"
	"github.com/gelozr/go-dash/internal/event/registry"
	"github.com/gelozr/go-dash/internal/hashing"
	"github.com/gelozr/go-dash/internal/http"
	"github.com/gelozr/go-dash/internal/http/validation/gp"
	"github.com/gelozr/go-dash/internal/invoice"
	"github.com/gelozr/go-dash/internal/logger/slog"
	"github.com/gelozr/go-dash/internal/mail"
	"github.com/gelozr/go-dash/internal/user"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	logger, err := slog.New(configConfig)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.Open(configConfig, logger)
	if err != nil {
		return nil, err
	}
	fiberServer := http.NewFiberServer(configConfig, logger)
	broker := event.NewBroker()
	gormStore := customer.NewStore(gormDB, logger)
	service := customer.NewService(gormStore, broker, logger)
	manager := mail.NewManager(configConfig)
	registerInitializer := registry.RegisterAll(broker, service, manager, logger)
	userGormStore := user.NewStore(gormDB, logger)
	userService := user.NewService(userGormStore, logger)
	hashingManager := hashing.NewManager(configConfig)
	dbUserProvider := auth.NewDBUserProvider(userService, hashingManager)
	gormRefreshStore := auth.NewGormRefreshStore(gormDB, logger)
	token := auth.NewToken(gormRefreshStore)
	jwtDriver := auth.NewJWTDriver(configConfig, token)
	provider, err := AuthProvider(dbUserProvider, jwtDriver)
	if err != nil {
		return nil, err
	}
	validator, err := gp.New()
	if err != nil {
		return nil, err
	}
	authHandler := http.NewAuthHandler(provider, validator)
	dashboardGormStore := dashboard.NewStore(gormDB, logger)
	dashboardService := dashboard.NewService(dashboardGormStore, logger)
	dashboardHandler := http.NewDashboardHandler(dashboardService, logger)
	userHandler := http.NewUserHandler(userService, logger)
	customerHandler := http.NewCustomerHandler(service, validator, logger)
	invoiceGormStore := invoice.NewStore(gormDB, logger)
	invoiceService := invoice.NewService(invoiceGormStore, logger)
	gormTxManager := db.NewTxManager(gormDB)
	createInvoice := app.NewCreateInvoice(service, invoiceService, gormTxManager, logger)
	invoiceHandler := http.NewInvoiceHandler(invoiceService, createInvoice, validator, logger)
	routeInitializer := http.SetupFiberRoutes(fiberServer, provider, authHandler, dashboardHandler, userHandler, customerHandler, invoiceHandler)
	bootstrapApp, err := AppProvider(configConfig, gormDB, logger, fiberServer, registerInitializer, routeInitializer)
	if err != nil {
		return nil, err
	}
	return bootstrapApp, nil
}
