// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"go-nextjs-dashboard/internal/app"
	"go-nextjs-dashboard/internal/config"
	"go-nextjs-dashboard/internal/customer"
	"go-nextjs-dashboard/internal/dashboard"
	"go-nextjs-dashboard/internal/db"
	"go-nextjs-dashboard/internal/event"
	"go-nextjs-dashboard/internal/event/bus"
	"go-nextjs-dashboard/internal/invoice"
	"go-nextjs-dashboard/internal/logger/slog"
	"go-nextjs-dashboard/internal/user"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeApp(cfg *config.Config, slogLogger *slog.Logger, db2 *gorm.DB) (*App, error) {
	gormStore := customer.NewStore(db2, slogLogger)
	v := bus.RegisterAll()
	broker := event.NewBroker(v)
	service := customer.NewService(gormStore, broker, slogLogger)
	userGormStore := user.NewStore(db2, slogLogger)
	userService := user.NewService(userGormStore, slogLogger)
	dashboardGormStore := dashboard.NewStore(db2, slogLogger)
	dashboardService := dashboard.NewService(dashboardGormStore, slogLogger)
	invoiceGormStore := invoice.NewStore(db2, slogLogger)
	invoiceService := invoice.NewService(invoiceGormStore, slogLogger)
	gormTxManager := db.NewTxManager(db2)
	createInvoice := app.NewCreateInvoice(service, invoiceService, gormTxManager, slogLogger)
	bootstrapApp, err := NewApp(cfg, slogLogger, service, userService, dashboardService, invoiceService, createInvoice)
	if err != nil {
		return nil, err
	}
	return bootstrapApp, nil
}
