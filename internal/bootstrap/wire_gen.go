// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"context"
	"go-nextjs-dashboard/internal/app"
	"go-nextjs-dashboard/internal/config"
	"go-nextjs-dashboard/internal/customer"
	"go-nextjs-dashboard/internal/dashboard"
	"go-nextjs-dashboard/internal/db"
	"go-nextjs-dashboard/internal/event"
	"go-nextjs-dashboard/internal/event/bus"
	"go-nextjs-dashboard/internal/http"
	"go-nextjs-dashboard/internal/http/validation/gp"
	"go-nextjs-dashboard/internal/invoice"
	"go-nextjs-dashboard/internal/logger/slog"
	"go-nextjs-dashboard/internal/user"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context) (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	logger, err := slog.New(configConfig)
	if err != nil {
		return nil, err
	}
	fiberServer := http.NewFiberServer(configConfig, logger)
	gormDB, err := db.Open(configConfig, logger)
	if err != nil {
		return nil, err
	}
	gormStore := dashboard.NewStore(gormDB, logger)
	service := dashboard.NewService(gormStore, logger)
	dashboardHandler := http.NewDashboardHandler(service, logger)
	userGormStore := user.NewStore(gormDB, logger)
	userService := user.NewService(userGormStore, logger)
	userHandler := http.NewUserHandler(userService, logger)
	customerGormStore := customer.NewStore(gormDB, logger)
	broker := event.NewBroker()
	customerService := customer.NewService(customerGormStore, broker, logger)
	validator, err := gp.New()
	if err != nil {
		return nil, err
	}
	customerHandler := http.NewCustomerHandler(customerService, validator, logger)
	invoiceGormStore := invoice.NewStore(gormDB, logger)
	invoiceService := invoice.NewService(invoiceGormStore, logger)
	gormTxManager := db.NewTxManager(gormDB)
	createInvoice := app.NewCreateInvoice(customerService, invoiceService, gormTxManager, logger)
	invoiceHandler := http.NewInvoiceHandler(invoiceService, createInvoice, validator, logger)
	routeInitializer := http.SetupFiberRoutes(fiberServer, dashboardHandler, userHandler, customerHandler, invoiceHandler)
	bootstrapTimezoneInitializer, err := setTimezone(configConfig)
	if err != nil {
		return nil, err
	}
	registerInitializer := bus.RegisterAll(broker, customerService, logger)
	bootstrapApp := NewApp(ctx, configConfig, logger, fiberServer, routeInitializer, bootstrapTimezoneInitializer, registerInitializer)
	return bootstrapApp, nil
}
